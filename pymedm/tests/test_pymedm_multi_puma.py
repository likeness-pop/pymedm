import warnings

import numpy
import pandas
import pytest

from pymedm import PMEDM, batch
from pymedm.diagnostics import moe_fit_rate
from pymedm.puma import puma

## Setup ##

# target PUMAs
pumas = ["4701601", "4701602", "4701603", "4701604"]

# create P-MEDM problems
mpu = dict.fromkeys(pumas)
for p in pumas:
    cind = pandas.read_csv("data/knox/cind_" + p + ".csv.gz", index_col=0)
    cg1 = pandas.read_csv("data/knox/cg1_" + p + ".csv.gz", index_col=0)
    cg2 = pandas.read_csv("data/knox/cg2_" + p + ".csv.gz", index_col=0)
    sg1 = pandas.read_csv("data/knox/sg1_" + p + ".csv.gz", index_col=0)
    sg2 = pandas.read_csv("data/knox/sg2_" + p + ".csv.gz", index_col=0)
    wt = pandas.read_csv("data/knox/wt_" + p + ".csv.gz", index_col=0).values.flatten()

    mpu[p] = puma(
        serial=cind.index.values,
        year=2019,
        wt=wt,
        cind=cind,
        cg1=cg1,
        cg2=cg2,
        sg1=sg1,
        sg2=sg2,
    )

## Test Multi-PUMA Runs ##


class TestPMEDMbatchSetUp:
    def setup_method(self):
        # P-MEDM
        self.pmds = batch.batch_solve(mpu, build_only=True)
        self.pmds_no_lv0 = batch.batch_solve(mpu, include_cg0=False, build_only=True)

    def test_intermediate(self):
        # N ========================================================================
        knowns = [50739, 49856, 96087, 66490]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].N
            known = knowns[ix]
            assert observed == known

        # n ========================================================================
        knowns = [2709, 2720, 5017, 3477]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].n
            known = knowns[ix]
            assert observed == known

        # Y_vec sum ================================================================
        knowns = [
            47.041683911783835,
            53.00834403080873,
            45.903712260763676,
            56.95000751992781,
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].Y_vec.sum()
            known = knowns[ix]
            assert observed == pytest.approx(known)

        # Y_vec sum ================================================================
        # no PUMA constraints
        knowns = [
            31.36112260785589,
            35.33889602053915,
            30.602474840509124,
            37.96667167995187,
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds_no_lv0[_puma].Y_vec.sum()
            known = knowns[ix]
            assert observed == pytest.approx(known)

        # Y_vec spot check =========================================================
        knowns = [
            [2.113758647194466, 0.0009657265614221802, 0.0],
            [2.2712612323491657, 0.0, 0.000561617458279846],
            [1.8561303818414563, 0.0006764702821401438, 0.0],
            [2.373544893969018, 0.0006918333583997594, 0.0],
        ]
        for ix, _puma in enumerate(pumas):
            _observed = self.pmds[_puma].Y_vec
            observed = [_observed[0], _observed[5000], _observed[-1]]
            known = knowns[ix]
            numpy.testing.assert_array_almost_equal(observed, known)

        # Y_vec spot check =========================================================
        # no PUMA constraints
        knowns = [
            [0.06298902225112832, 0.004572419637753996, 0.0],
            [0.11348684210526316, 0.061477053915276, 0.000561617458279846],
            [0.025633020075556526, 0.0, 0.0],
            [0.10535418859978944, 0.00043615581290419613, 0.0],
        ]
        for ix, _puma in enumerate(pumas):
            _observed = self.pmds_no_lv0[_puma].Y_vec
            observed = [_observed[0], _observed[5000], _observed[-1]]
            known = knowns[ix]
            numpy.testing.assert_array_almost_equal(observed, known)

        # V_vec sum ================================================================
        knowns = [
            30.1223712599759,
            29.007056645931556,
            32.60985913379925,
            31.032250643771743,
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].V_vec.sum()
            known = knowns[ix]
            assert observed == pytest.approx(known)

        # V_vec sum ================================================================
        # no PUMA constraints
        knowns = [
            29.94012580658091,
            28.838198664582293,
            32.42522883854601,
            30.852090484314065,
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds_no_lv0[_puma].V_vec.sum()
            known = knowns[ix]
            assert observed == pytest.approx(known)

        # V_vec spot check =========================================================
        knowns = [
            [0.03516092157396937, 0.0013998963914737665, 5.599585565895062e-05],
            [0.02948700552115293, 5.823240518658654e-05, 0.0006470267242954061],
            [0.029077476852871396, 0.0005429873542941188, 2.8916486323355432e-05],
            [0.02811651856393563, 0.0006420309082126989, 4.185262597674451e-05],
        ]
        for ix, _puma in enumerate(pumas):
            _observed = self.pmds[_puma].V_vec
            observed = [_observed[0], _observed[5000], _observed[-1]]
            known = knowns[ix]
            numpy.testing.assert_array_almost_equal(observed, known)

        # V_vec spot check =========================================================
        # no PUMA constraints
        knowns = [
            [0.028981355044485634, 0.006173543086399307, 5.599585565895062e-05],
            [0.16101300473261448, 0.14172473368966582, 0.0006470267242954061],
            [0.010347483498306826, 2.8916486323355432e-05, 2.8916486323355432e-05],
            [0.0544924096649573, 0.00041968883271124364, 4.185262597674451e-05],
        ]
        for ix, _puma in enumerate(pumas):
            _observed = self.pmds_no_lv0[_puma].V_vec
            observed = [_observed[0], _observed[5000], _observed[-1]]
            known = knowns[ix]
            numpy.testing.assert_array_almost_equal(observed, known)

        # V_vec == sV.data =========================================================
        for _puma in pumas:
            numpy.testing.assert_array_equal(
                self.pmds[_puma].V_vec, self.pmds[_puma].sV.data
            )

        # V_vec == sV.data =========================================================
        for _puma in pumas:
            numpy.testing.assert_array_equal(
                self.pmds_no_lv0[_puma].V_vec, self.pmds_no_lv0[_puma].sV.data
            )

        # topo counts ==============================================================
        knowns = [
            [(73, 2), 24, 73],
            [(56, 2), 26, 56],
            [(113, 2), 49, 113],
            [(66, 2), 34, 66],
        ]
        for ix, _puma in enumerate(pumas):
            _observed = self.pmds[_puma].topo
            observed = [_observed.shape, _observed.g1.nunique(), _observed.g2.nunique()]
            known = knowns[ix]
            assert observed == known

        # A0 =======================================================================
        knowns_shape = [(73,), (56,), (113,), (66,)]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].A0

            # A0 array shape -------------------------------
            known = knowns_shape[ix]
            assert observed.shape == known

        # A1 =======================================================================
        knowns_shape = [(24, 73), (26, 56), (49, 113), (34, 66)]
        knowns_indices = [
            numpy.array(
                [
                    [
                        0,
                        0,
                        1,
                        1,
                        2,
                        2,
                        2,
                        3,
                        3,
                        3,
                        4,
                        4,
                        4,
                        5,
                        5,
                        5,
                        6,
                        6,
                        7,
                        7,
                        8,
                        8,
                        8,
                        9,
                        9,
                        9,
                        10,
                        10,
                        10,
                        10,
                        11,
                        11,
                        11,
                        11,
                        12,
                        12,
                        12,
                        13,
                        13,
                        13,
                        13,
                        14,
                        14,
                        14,
                        14,
                        15,
                        15,
                        16,
                        16,
                        16,
                        16,
                        16,
                        17,
                        17,
                        17,
                        18,
                        18,
                        19,
                        19,
                        20,
                        20,
                        20,
                        20,
                        20,
                        21,
                        21,
                        21,
                        22,
                        22,
                        22,
                        22,
                        23,
                        23,
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                    ],
                ]
            ),
            numpy.array(
                [
                    [
                        0,
                        0,
                        1,
                        1,
                        2,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        4,
                        5,
                        5,
                        6,
                        6,
                        7,
                        7,
                        8,
                        8,
                        9,
                        9,
                        9,
                        10,
                        10,
                        11,
                        11,
                        12,
                        12,
                        13,
                        13,
                        13,
                        14,
                        14,
                        15,
                        15,
                        16,
                        16,
                        16,
                        17,
                        17,
                        18,
                        18,
                        19,
                        20,
                        20,
                        20,
                        21,
                        21,
                        22,
                        22,
                        23,
                        24,
                        24,
                        25,
                        25,
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                    ],
                ]
            ),
            numpy.array(
                [
                    [
                        0,
                        1,
                        1,
                        1,
                        2,
                        3,
                        3,
                        4,
                        4,
                        4,
                        5,
                        5,
                        5,
                        6,
                        6,
                        7,
                        7,
                        8,
                        8,
                        9,
                        10,
                        10,
                        10,
                        11,
                        11,
                        12,
                        12,
                        12,
                        13,
                        13,
                        14,
                        14,
                        15,
                        15,
                        16,
                        16,
                        17,
                        17,
                        18,
                        18,
                        19,
                        19,
                        19,
                        20,
                        20,
                        21,
                        21,
                        22,
                        23,
                        23,
                        24,
                        24,
                        24,
                        25,
                        25,
                        25,
                        26,
                        26,
                        26,
                        27,
                        27,
                        28,
                        28,
                        29,
                        29,
                        30,
                        30,
                        31,
                        31,
                        32,
                        32,
                        33,
                        33,
                        34,
                        34,
                        35,
                        35,
                        35,
                        36,
                        36,
                        37,
                        37,
                        37,
                        37,
                        38,
                        38,
                        39,
                        39,
                        40,
                        40,
                        41,
                        41,
                        41,
                        42,
                        42,
                        42,
                        43,
                        43,
                        44,
                        44,
                        44,
                        45,
                        45,
                        45,
                        45,
                        46,
                        46,
                        46,
                        47,
                        47,
                        48,
                        48,
                        48,
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                    ],
                ]
            ),
            numpy.array(
                [
                    [
                        0,
                        0,
                        0,
                        1,
                        1,
                        2,
                        2,
                        2,
                        3,
                        3,
                        3,
                        4,
                        4,
                        5,
                        6,
                        6,
                        7,
                        7,
                        8,
                        8,
                        8,
                        9,
                        9,
                        9,
                        10,
                        10,
                        11,
                        11,
                        12,
                        13,
                        14,
                        14,
                        15,
                        15,
                        16,
                        16,
                        16,
                        16,
                        17,
                        18,
                        19,
                        19,
                        20,
                        20,
                        21,
                        21,
                        22,
                        23,
                        24,
                        24,
                        25,
                        25,
                        26,
                        26,
                        26,
                        27,
                        28,
                        29,
                        30,
                        30,
                        31,
                        32,
                        32,
                        32,
                        33,
                        33,
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                    ],
                ]
            ),
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].A1

            # A1 array shape -------------------------------
            known = knowns_shape[ix]
            assert observed.shape == known

            # A1 array "1" values indices ------------------
            known = knowns_indices[ix]
            numpy.testing.assert_array_almost_equal(
                numpy.array(numpy.where(observed == 1)), known
            )

        # A2 diagonal ==============================================================
        knowns = [73, 56, 113, 66]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].A2.diagonal()
            known = numpy.ones(knowns[ix])
            numpy.testing.assert_array_equal(observed, known)

        # X sum ================================================================
        knowns = [
            10414538.185128871,
            8445892.879847437,
            27814617.646297444,
            13936689.80608946,
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].X.data.sum()
            known = knowns[ix]
            assert observed == pytest.approx(known)

        # X sum ================================================================
        # no PUMA constraints
        knowns = [
            6943025.4567525815,
            5630595.253231624,
            18543078.43086496,
            9291126.537392974,
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds_no_lv0[_puma].X.data.sum()
            known = knowns[ix]
            assert observed == pytest.approx(known)

        # q (sum to 1, unique values, and counts) ==================================
        knowns = [
            [
                numpy.array(
                    [
                        2.69982264865021e-07,
                        5.39964529730042e-07,
                        8.099467945950631e-07,
                        1.079929059460084e-06,
                        1.349911324325105e-06,
                        1.6198935891901262e-06,
                        1.8898758540551471e-06,
                        2.159858118920168e-06,
                        2.429840383785189e-06,
                        2.69982264865021e-06,
                        2.9698049135152314e-06,
                        3.2397871783802523e-06,
                        3.5097694432452733e-06,
                        3.7797517081102942e-06,
                        4.049733972975316e-06,
                        4.319716237840336e-06,
                        4.5896985027053575e-06,
                        4.859680767570378e-06,
                        5.1296630324353994e-06,
                        5.39964529730042e-06,
                        5.669627562165441e-06,
                        5.939609827030463e-06,
                        6.209592091895483e-06,
                        6.479574356760505e-06,
                        6.749556621625525e-06,
                        7.0195388864905465e-06,
                        7.289521151355567e-06,
                        7.5595034162205885e-06,
                        7.829485681085609e-06,
                        8.099467945950631e-06,
                        8.369450210815652e-06,
                        8.639432475680672e-06,
                        8.909414740545693e-06,
                        9.179397005410715e-06,
                        9.449379270275736e-06,
                        9.719361535140756e-06,
                        9.989343800005778e-06,
                        1.0259326064870799e-05,
                        1.052930832973582e-05,
                        1.079929059460084e-05,
                        1.1069272859465862e-05,
                        1.1339255124330883e-05,
                        1.1609237389195903e-05,
                        1.1879219654060925e-05,
                        1.2149201918925946e-05,
                        1.2419184183790967e-05,
                        1.2689166448655987e-05,
                        1.295914871352101e-05,
                        1.322913097838603e-05,
                        1.349911324325105e-05,
                        1.3769095508116073e-05,
                        1.4039077772981093e-05,
                        1.4309060037846114e-05,
                        1.4579042302711134e-05,
                        1.4849024567576156e-05,
                        1.5119006832441177e-05,
                        1.5388989097306197e-05,
                        1.5658971362171218e-05,
                        1.592895362703624e-05,
                        1.6198935891901262e-05,
                        1.6468918156766283e-05,
                        1.6738900421631303e-05,
                        1.7008882686496324e-05,
                        1.7278864951361345e-05,
                        1.7548847216226365e-05,
                        1.7818829481091386e-05,
                        1.808881174595641e-05,
                        1.835879401082143e-05,
                        1.862877627568645e-05,
                        1.889875854055147e-05,
                        1.916874080541649e-05,
                        1.9438723070281512e-05,
                        1.9708705335146533e-05,
                        1.9978687600011557e-05,
                        2.0518652129741598e-05,
                        2.0788634394606618e-05,
                        2.105861665947164e-05,
                        2.132859892433666e-05,
                        2.159858118920168e-05,
                        2.2678510248661765e-05,
                        2.2948492513526786e-05,
                        2.3218474778391806e-05,
                        2.3488457043256827e-05,
                        2.402842157298687e-05,
                        2.4568386102716912e-05,
                        2.726820875136712e-05,
                        2.7808173281097166e-05,
                        2.8888102340557248e-05,
                        2.9158084605422268e-05,
                        2.9698049135152313e-05,
                        3.0777978194612395e-05,
                        3.455772990272269e-05,
                    ]
                ),
                numpy.array(
                    [
                        365,
                        511,
                        4088,
                        9125,
                        8030,
                        6643,
                        5475,
                        6351,
                        6643,
                        8030,
                        12410,
                        9782,
                        9344,
                        9636,
                        8468,
                        7373,
                        6862,
                        8103,
                        5475,
                        5840,
                        5256,
                        5548,
                        4745,
                        3942,
                        3504,
                        2117,
                        2409,
                        2044,
                        2117,
                        1095,
                        1095,
                        876,
                        1606,
                        657,
                        1387,
                        1314,
                        1095,
                        876,
                        1241,
                        876,
                        584,
                        511,
                        292,
                        511,
                        73,
                        584,
                        657,
                        219,
                        584,
                        365,
                        657,
                        365,
                        511,
                        292,
                        292,
                        511,
                        438,
                        292,
                        949,
                        584,
                        511,
                        730,
                        292,
                        292,
                        365,
                        438,
                        292,
                        438,
                        73,
                        146,
                        146,
                        219,
                        219,
                        146,
                        73,
                        73,
                        292,
                        146,
                        73,
                        73,
                        146,
                        73,
                        146,
                        146,
                        73,
                        73,
                        73,
                        73,
                        73,
                        73,
                        73,
                        73,
                    ]
                ),
            ],
            [
                numpy.array(
                    [
                        3.5817439941316706e-07,
                        1.0745231982395012e-06,
                        1.4326975976526682e-06,
                        1.7908719970658353e-06,
                        2.1490463964790025e-06,
                        2.5072207958921693e-06,
                        2.8653951953053365e-06,
                        3.2235695947185037e-06,
                        3.5817439941316705e-06,
                        3.939918393544837e-06,
                        4.298092792958005e-06,
                        4.656267192371172e-06,
                        5.0144415917843385e-06,
                        5.372615991197506e-06,
                        5.730790390610673e-06,
                        6.08896479002384e-06,
                        6.447139189437007e-06,
                        6.805313588850174e-06,
                        7.163487988263341e-06,
                        7.521662387676509e-06,
                        7.879836787089675e-06,
                        8.238011186502843e-06,
                        8.59618558591601e-06,
                        8.954359985329177e-06,
                        9.312534384742343e-06,
                        9.67070878415551e-06,
                        1.0028883183568677e-05,
                        1.0387057582981846e-05,
                        1.0745231982395012e-05,
                        1.1103406381808179e-05,
                        1.1461580781221346e-05,
                        1.1819755180634513e-05,
                        1.217792958004768e-05,
                        1.2536103979460848e-05,
                        1.2894278378874015e-05,
                        1.3252452778287182e-05,
                        1.3610627177700348e-05,
                        1.3968801577113515e-05,
                        1.4326975976526682e-05,
                        1.4685150375939849e-05,
                        1.5043324775353017e-05,
                        1.5401499174766182e-05,
                        1.575967357417935e-05,
                        1.611784797359252e-05,
                        1.6476022373005686e-05,
                        1.6834196772418853e-05,
                        1.719237117183202e-05,
                        1.7550545571245187e-05,
                        1.7908719970658353e-05,
                        1.826689437007152e-05,
                        1.8625068769484687e-05,
                        1.8983243168897854e-05,
                        1.934141756831102e-05,
                        1.9699591967724187e-05,
                        2.0057766367137354e-05,
                        2.0415940766550524e-05,
                        2.077411516596369e-05,
                        2.1132289565376858e-05,
                        2.1490463964790025e-05,
                        2.184863836420319e-05,
                        2.2206812763616358e-05,
                        2.2564987163029525e-05,
                        2.2923161562442692e-05,
                        2.328133596185586e-05,
                        2.3639510361269025e-05,
                        2.3997684760682192e-05,
                        2.435585916009536e-05,
                        2.4714033559508526e-05,
                        2.5072207958921696e-05,
                        2.5430382358334863e-05,
                        2.6146731157161196e-05,
                        2.6504905556574363e-05,
                        2.7221254355400697e-05,
                        2.7579428754813864e-05,
                        2.793760315422703e-05,
                        2.8295777553640197e-05,
                        2.8653951953053364e-05,
                        2.901212635246653e-05,
                        2.9370300751879698e-05,
                        2.9728475151292868e-05,
                        3.25938703465982e-05,
                        3.617561434072987e-05,
                        3.653378874014304e-05,
                        4.298092792958005e-05,
                    ]
                ),
                numpy.array(
                    [
                        1456,
                        336,
                        448,
                        168,
                        112,
                        1344,
                        2240,
                        6104,
                        8848,
                        16632,
                        18480,
                        16688,
                        11928,
                        8736,
                        4312,
                        4928,
                        4032,
                        4144,
                        4592,
                        3360,
                        2800,
                        3192,
                        2688,
                        1568,
                        1008,
                        616,
                        672,
                        896,
                        840,
                        560,
                        728,
                        1344,
                        1176,
                        840,
                        1176,
                        1344,
                        1568,
                        672,
                        896,
                        280,
                        784,
                        672,
                        280,
                        280,
                        112,
                        280,
                        224,
                        56,
                        224,
                        392,
                        168,
                        224,
                        280,
                        280,
                        336,
                        56,
                        168,
                        168,
                        112,
                        336,
                        224,
                        168,
                        280,
                        168,
                        112,
                        224,
                        112,
                        280,
                        280,
                        56,
                        112,
                        56,
                        56,
                        168,
                        112,
                        112,
                        112,
                        112,
                        112,
                        56,
                        56,
                        56,
                        56,
                        56,
                    ]
                ),
            ],
            [
                numpy.array(
                    [
                        9.20994257508705e-08,
                        1.84198851501741e-07,
                        2.762982772526115e-07,
                        3.68397703003482e-07,
                        4.604971287543525e-07,
                        5.52596554505223e-07,
                        6.446959802560935e-07,
                        7.36795406006964e-07,
                        8.288948317578345e-07,
                        9.20994257508705e-07,
                        1.0130936832595755e-06,
                        1.105193109010446e-06,
                        1.1972925347613166e-06,
                        1.289391960512187e-06,
                        1.3814913862630574e-06,
                        1.473590812013928e-06,
                        1.5656902377647985e-06,
                        1.657789663515669e-06,
                        1.7498890892665395e-06,
                        1.84198851501741e-06,
                        1.9340879407682806e-06,
                        2.026187366519151e-06,
                        2.1182867922700215e-06,
                        2.210386218020892e-06,
                        2.3024856437717623e-06,
                        2.394585069522633e-06,
                        2.4866844952735036e-06,
                        2.578783921024374e-06,
                        2.6708833467752444e-06,
                        2.762982772526115e-06,
                        2.8550821982769857e-06,
                        2.947181624027856e-06,
                        3.0392810497787266e-06,
                        3.131380475529597e-06,
                        3.2234799012804674e-06,
                        3.315579327031338e-06,
                        3.4076787527822087e-06,
                        3.499778178533079e-06,
                        3.5918776042839495e-06,
                        3.68397703003482e-06,
                        3.7760764557856904e-06,
                        3.868175881536561e-06,
                        3.960275307287432e-06,
                        4.052374733038302e-06,
                        4.1444741587891725e-06,
                        4.236573584540043e-06,
                        4.328673010290913e-06,
                        4.420772436041784e-06,
                        4.512871861792654e-06,
                        4.604971287543525e-06,
                        4.697070713294396e-06,
                        4.789170139045266e-06,
                        4.881269564796137e-06,
                        4.973368990547007e-06,
                        5.065468416297878e-06,
                        5.157567842048748e-06,
                        5.2496672677996184e-06,
                        5.341766693550489e-06,
                        5.433866119301359e-06,
                        5.52596554505223e-06,
                        5.6180649708031e-06,
                        5.710164396553971e-06,
                        5.802263822304842e-06,
                        5.894363248055712e-06,
                        5.986462673806583e-06,
                        6.078562099557453e-06,
                        6.1706615253083235e-06,
                        6.262760951059194e-06,
                        6.354860376810064e-06,
                        6.446959802560935e-06,
                        6.539059228311805e-06,
                        6.631158654062676e-06,
                        6.723258079813547e-06,
                        6.815357505564417e-06,
                        6.907456931315288e-06,
                        6.999556357066158e-06,
                        7.183755208567899e-06,
                        7.2758546343187695e-06,
                        7.36795406006964e-06,
                        7.46005348582051e-06,
                        7.552152911571381e-06,
                        7.644252337322251e-06,
                        7.736351763073122e-06,
                        7.920550614574863e-06,
                        8.012650040325733e-06,
                        8.196848891827475e-06,
                        8.473147169080086e-06,
                        8.841544872083568e-06,
                        9.025743723585308e-06,
                        9.20994257508705e-06,
                        9.486240852339661e-06,
                        9.670439703841402e-06,
                        1.0591433961350108e-05,
                        1.3170217882374482e-05,
                    ]
                ),
                numpy.array(
                    [
                        3842,
                        3503,
                        2373,
                        1695,
                        3955,
                        5198,
                        9040,
                        12204,
                        24295,
                        45087,
                        62376,
                        58308,
                        39776,
                        24747,
                        17515,
                        12769,
                        17854,
                        15029,
                        17515,
                        16046,
                        14803,
                        16046,
                        10961,
                        6667,
                        6102,
                        7006,
                        6328,
                        6102,
                        6780,
                        5085,
                        7119,
                        4633,
                        5198,
                        6328,
                        5989,
                        3842,
                        4520,
                        3955,
                        2599,
                        3277,
                        3277,
                        1808,
                        1921,
                        1695,
                        791,
                        1469,
                        1808,
                        1243,
                        1356,
                        1130,
                        1582,
                        1808,
                        1356,
                        1017,
                        565,
                        1469,
                        1469,
                        1356,
                        1017,
                        1130,
                        791,
                        678,
                        791,
                        791,
                        565,
                        452,
                        1130,
                        1017,
                        226,
                        678,
                        565,
                        113,
                        452,
                        113,
                        113,
                        113,
                        113,
                        226,
                        113,
                        113,
                        226,
                        113,
                        113,
                        452,
                        113,
                        113,
                        113,
                        113,
                        113,
                        113,
                        113,
                        113,
                        113,
                        113,
                    ]
                ),
            ],
            [
                numpy.array(
                    [
                        2.2787660026342534e-07,
                        4.557532005268507e-07,
                        6.83629800790276e-07,
                        9.115064010537014e-07,
                        1.1393830013171267e-06,
                        1.367259601580552e-06,
                        1.5951362018439774e-06,
                        1.8230128021074027e-06,
                        2.050889402370828e-06,
                        2.2787660026342534e-06,
                        2.5066426028976788e-06,
                        2.734519203161104e-06,
                        2.9623958034245294e-06,
                        3.1902724036879548e-06,
                        3.41814900395138e-06,
                        3.6460256042148055e-06,
                        3.873902204478231e-06,
                        4.101778804741656e-06,
                        4.3296554050050815e-06,
                        4.557532005268507e-06,
                        4.785408605531932e-06,
                        5.0132852057953575e-06,
                        5.241161806058783e-06,
                        5.469038406322208e-06,
                        5.6969150065856335e-06,
                        5.924791606849059e-06,
                        6.152668207112484e-06,
                        6.3805448073759096e-06,
                        6.608421407639335e-06,
                        6.83629800790276e-06,
                        7.064174608166186e-06,
                        7.292051208429611e-06,
                        7.519927808693036e-06,
                        7.747804408956462e-06,
                        7.975681009219888e-06,
                        8.203557609483312e-06,
                        8.431434209746738e-06,
                        8.659310810010163e-06,
                        8.88718741027359e-06,
                        9.115064010537014e-06,
                        9.34294061080044e-06,
                        9.570817211063864e-06,
                        9.79869381132729e-06,
                        1.0026570411590715e-05,
                        1.0254447011854141e-05,
                        1.0482323612117566e-05,
                        1.0710200212380992e-05,
                        1.0938076812644416e-05,
                        1.1165953412907843e-05,
                        1.1393830013171267e-05,
                        1.1621706613434693e-05,
                        1.1849583213698118e-05,
                        1.2077459813961544e-05,
                        1.2305336414224968e-05,
                        1.2533213014488395e-05,
                        1.2761089614751819e-05,
                        1.2988966215015245e-05,
                        1.321684281527867e-05,
                        1.3444719415542096e-05,
                        1.367259601580552e-05,
                        1.3900472616068947e-05,
                        1.4128349216332371e-05,
                        1.4356225816595797e-05,
                        1.4584102416859222e-05,
                        1.4811979017122648e-05,
                        1.5039855617386073e-05,
                        1.5267732217649497e-05,
                        1.5495608817912923e-05,
                        1.572348541817635e-05,
                        1.5951362018439776e-05,
                        1.61792386187032e-05,
                        1.6407115218966625e-05,
                        1.663499181923005e-05,
                        1.6862868419493477e-05,
                        1.70907450197569e-05,
                        1.7318621620020326e-05,
                        1.7546498220283752e-05,
                        1.777437482054718e-05,
                        1.8230128021074027e-05,
                        1.8458004621337454e-05,
                        1.868588122160088e-05,
                        1.914163442212773e-05,
                        1.959738762265458e-05,
                        2.0736770623971705e-05,
                        2.1420400424761984e-05,
                        2.3243413226869387e-05,
                        3.1219094236089276e-05,
                    ]
                ),
                numpy.array(
                    [
                        462,
                        132,
                        132,
                        528,
                        924,
                        3828,
                        7788,
                        7458,
                        7128,
                        12540,
                        19206,
                        24288,
                        18546,
                        12408,
                        7854,
                        5742,
                        6006,
                        8118,
                        10560,
                        9504,
                        8250,
                        7062,
                        6468,
                        4884,
                        3366,
                        2046,
                        2244,
                        1848,
                        1386,
                        924,
                        1188,
                        924,
                        990,
                        1254,
                        1386,
                        1188,
                        792,
                        1386,
                        1056,
                        792,
                        1254,
                        396,
                        330,
                        726,
                        396,
                        330,
                        462,
                        594,
                        198,
                        132,
                        396,
                        132,
                        330,
                        528,
                        660,
                        198,
                        594,
                        396,
                        924,
                        924,
                        726,
                        462,
                        330,
                        462,
                        594,
                        396,
                        660,
                        330,
                        792,
                        264,
                        198,
                        264,
                        198,
                        132,
                        132,
                        66,
                        66,
                        132,
                        66,
                        264,
                        66,
                        66,
                        66,
                        66,
                        66,
                        66,
                        66,
                    ]
                ),
            ],
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].q
            assert 1.0 == pytest.approx(observed.sum())
            obs_values, obs_counts = numpy.unique(observed, return_counts=True)
            known_values, known_counts = knowns[ix][0], knowns[ix][1]
            numpy.testing.assert_array_almost_equal(obs_values, known_values)
            numpy.testing.assert_array_equal(obs_counts.astype(int), known_counts)

        # lam ======================================================================
        knowns = [
            numpy.zeros(17836),
            numpy.zeros(15106),
            numpy.zeros(29666),
            numpy.zeros(18382),
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds[_puma].lam
            known = knowns[ix]
            numpy.testing.assert_array_equal(observed, known)

        # lam ======================================================================
        # no PUMA constraints
        knowns = [
            numpy.zeros(17654),
            numpy.zeros(14924),
            numpy.zeros(29484),
            numpy.zeros(18200),
        ]
        for ix, _puma in enumerate(pumas):
            observed = self.pmds_no_lv0[_puma].lam
            known = knowns[ix]
            numpy.testing.assert_array_equal(observed, known)


class TestPMEDMbatchSolve:
    def test_solve(self):
        # P-MEDM
        pmds = batch.batch_solve(mpu)

        # test objective values
        observed = numpy.array([pmds[p].res.state.value for p in pumas])
        known = numpy.array(
            [
                -1.6219540409744428,
                -1.5202809123725736,
                -1.740215493083952,
                -1.3807383902412815,
            ]
        )
        numpy.testing.assert_array_almost_equal(observed, known, decimal=3)


class TestPMEDMbatchSolve_no_lv0:
    def test_solve(self):
        # P-MEDM
        pmds = batch.batch_solve(mpu, include_cg0=False)

        # test objective values
        observed = numpy.array([pmds[p].res.state.value for p in pumas])
        known = numpy.array(
            [
                -1.3468085968695942,
                -1.2136035003966017,
                -1.4370510299043209,
                -1.1559877936344942,
            ]
        )
        numpy.testing.assert_array_almost_equal(observed, known, decimal=3)
